{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/scenes/Boot.js","webpack:///./src/images/Logo.js","webpack:///./src/images/pileBg.js","webpack:///./src/images/cardBackground.js","webpack:///./src/cardLibrary/cardLibrary.js","webpack:///./src/cardLibrary/cardFunctions.js","webpack:///./src/cardLibrary/starterDeck.js","webpack:///./src/utility/UpdateArc.js","webpack:///./src/utility/uuid.js","webpack:///./src/sprites/CardCreator.js","webpack:///./src/sprites/DrawPileCreator.js","webpack:///./src/sprites/DiscardPileCreator.js","webpack:///./src/sprites/EnemyAvatar.js","webpack:///./src/charathers/enemies/enemiesLibrary.js","webpack:///./src/charathers/dependencies/HealthBar.js","webpack:///./src/charathers/enemies/EnemyCreator.js","webpack:///./src/scenes/Game.js","webpack:///./src/scenes/DrawPileScene.js","webpack:///./src/scenes/DiscardPileScene.js","webpack:///./src/index.js","webpack:///./assets/images/logo.png","webpack:///./assets/images/mushroom2.png","webpack:///./assets/images/cardBackground.png","webpack:///./assets/images/pileBg.png","webpack:///./assets/images/Goblin.png","webpack:///./assets/images/Goobler.png"],"names":["webpackJsonpCallback","data","moduleId","chunkId","chunkIds","moreModules","executeModules","i","resolves","length","installedChunks","push","Object","prototype","hasOwnProperty","call","modules","parentJsonpFunction","shift","deferredModules","apply","checkDeferredModules","result","deferredModule","fulfilled","j","depId","splice","__webpack_require__","s","installedModules","0","exports","module","l","m","c","d","name","getter","o","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","p","jsonpArray","window","oldJsonpFunction","slice","_default","_classCallCheck","this","_possibleConstructorReturn","_getPrototypeOf","Phaser","Scene","_this","progress","add","graphics","load","on","clear","fillStyle","fillRect","game","renderer","height","width","image","logo","mushroom","cardBackground","pileBg","Goblin","Goobler","scene","start","x","y","Logo_classCallCheck","Logo_possibleConstructorReturn","Logo_getPrototypeOf","existing","Logo_assertThisInitialized","GameObjects","Image","pileBg_classCallCheck","pileBg_possibleConstructorReturn","pileBg_getPrototypeOf","pileBg_assertThisInitialized","Sprite","rarity","cardBackground_classCallCheck","cardBackground_possibleConstructorReturn","cardBackground_getPrototypeOf","tint","resetTint","cardLibrary","_objectSpread","strike","nameRef","selector","actions","doDamage","damage","type","baseCost","currentCost","props","playable","description","concat","doubleStrike","timesHit","wildElbow","defend","addArmor","dodge","drawCard","_ref","dexterity","action","target","cardFunctions_classCallCheck","amount","player","armor","drawCardFromDrawPile","values","_values$timesHit","active","takeDamage","starterDeck","pointer","p0","p1","p2","p3","UpdateArc_classCallCheck","UpdateArc_possibleConstructorReturn","UpdateArc_getPrototypeOf","lineStyle","color","alpha","Geom","Line","delete","x2","y2","line","strokeLineShape","destroy","uuid","replace","Math","random","toString","card","interactable","CardCreator_classCallCheck","CardCreator_possibleConstructorReturn","CardCreator_getPrototypeOf","CardCreator_assertThisInitialized","getBackground","getCardTitle","getDescription","getManaCost","setSize","background","setInteractive","draggable","getManaOutline","setEventListeners","Container","_this2","dimensions","children","bringToTop","angle","gameObject","handY","handAngle","setScale","lineActive","dragX","dragY","UpdateArc","update","cardTarget","playCard","manageHand","arg","cardTitle","style","font","fill","align","wordWrap","wordWrapWidth","text","setOrigin","cardDescription","lineHeight","manaCost","manaCircle","Circle","manaGraphics","Graphics","fillCircleShape","fillRoundedRect","manaOutline","sendToBack","tweens","duration","targets","scaleX","scaleY","yoyo","repeat","ease","_this3","cantPlayOutline","outOfManaMessage","time","addEvent","delay","callback","callbackScope","_this4","currentMana","keys","forEach","cardFunctions","scale","discardPileDisplay","onComplete","discard","handArray","filter","id","cantPlay","DrawPileCreator_classCallCheck","DrawPileCreator_possibleConstructorReturn","DrawPileCreator_getPrototypeOf","DrawPileCreator_assertThisInitialized","updateDrawPileCounter","drawPile","pause","launch","drawPileCounterCircle","countGraphics","countNumber","drawPileCount","countCircle","DiscardPileCreator_classCallCheck","DiscardPileCreator_possibleConstructorReturn","DiscardPileCreator_getPrototypeOf","DiscardPileCreator_assertThisInitialized","updateDiscardPileCounter","discardPile","discardPileCounterCircle","discardPileLength","enemyType","EnemyAvatar_classCallCheck","EnemyAvatar_possibleConstructorReturn","EnemyAvatar_getPrototypeOf","EnemyAvatar_assertThisInitialized","enemiesLibrary","goblin","maxHealth","currentHealth","addAttribute","onDeath","reward","powerLevel","goobler","container","character","HealthBar_classCallCheck","HealthBar_possibleConstructorReturn","HealthBar_getPrototypeOf","parentContainer","GameObject","healthBarBgShape","Rectangle","enemyImage","healthBarBgGraphics","fillRectShape","healthBarShape","Clone","healthText","healthBarGraphics","setText","EnemyCreator_classCallCheck","EnemyCreator_possibleConstructorReturn","EnemyCreator_getPrototypeOf","enemy","EnemyCreator_objectSpread","EnemyCreator_assertThisInitialized","EnemyAvatar","healthBar","HealthBar","loop","death","Game_classCallCheck","Game_possibleConstructorReturn","Game_getPrototypeOf","hp","strength","buffs","maxMana","relics","drawAmount","maxHandSize","isTurn","playerDeck","hand","enemies","deck","arguments","undefined","Game_objectSpread","_i","_Object$entries","entries","_Object$entries$_i","_slicedToArray","cardName","ref","refName","drawPileDisplay","DrawPileCreator","DiscardPileCreator","sort","a","b","cardClone","arrayDeckKeys","shuffleDiscardToDrawPile","CardCreator","startX","ceil","startY","rotate","handX","startTurnHook","_this5","discardHand","sys","canvas","Logo","createPlayerDeck","createDrawPile","EnemyCreator","input","_draggable","DrawPileScene_classCallCheck","DrawPileScene_possibleConstructorReturn","DrawPileScene_getPrototypeOf","cardList","gameScene","cameras","main","backgroundColor","setTo","xMultiplier","yMultiplier","resume","stop","delta","DiscardPileScene_classCallCheck","DiscardPileScene_possibleConstructorReturn","DiscardPileScene_getPrototypeOf","config","AUTO","parent","innerWidth","innerHeight","Boot","Game","DrawPileScene","DiscardPileScene"],"mappings":"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","file":"bundle.1a30621838604ace4b58.js","sourcesContent":[" \t// install a JSONP callback for chunk loading\n \tfunction webpackJsonpCallback(data) {\n \t\tvar chunkIds = data[0];\n \t\tvar moreModules = data[1];\n \t\tvar executeModules = data[2];\n\n \t\t// add \"moreModules\" to the modules object,\n \t\t// then flag all \"chunkIds\" as loaded and fire callback\n \t\tvar moduleId, chunkId, i = 0, resolves = [];\n \t\tfor(;i < chunkIds.length; i++) {\n \t\t\tchunkId = chunkIds[i];\n \t\t\tif(installedChunks[chunkId]) {\n \t\t\t\tresolves.push(installedChunks[chunkId][0]);\n \t\t\t}\n \t\t\tinstalledChunks[chunkId] = 0;\n \t\t}\n \t\tfor(moduleId in moreModules) {\n \t\t\tif(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {\n \t\t\t\tmodules[moduleId] = moreModules[moduleId];\n \t\t\t}\n \t\t}\n \t\tif(parentJsonpFunction) parentJsonpFunction(data);\n\n \t\twhile(resolves.length) {\n \t\t\tresolves.shift()();\n \t\t}\n\n \t\t// add entry modules from loaded chunk to deferred list\n \t\tdeferredModules.push.apply(deferredModules, executeModules || []);\n\n \t\t// run deferred modules when all chunks ready\n \t\treturn checkDeferredModules();\n \t};\n \tfunction checkDeferredModules() {\n \t\tvar result;\n \t\tfor(var i = 0; i < deferredModules.length; i++) {\n \t\t\tvar deferredModule = deferredModules[i];\n \t\t\tvar fulfilled = true;\n \t\t\tfor(var j = 1; j < deferredModule.length; j++) {\n \t\t\t\tvar depId = deferredModule[j];\n \t\t\t\tif(installedChunks[depId] !== 0) fulfilled = false;\n \t\t\t}\n \t\t\tif(fulfilled) {\n \t\t\t\tdeferredModules.splice(i--, 1);\n \t\t\t\tresult = __webpack_require__(__webpack_require__.s = deferredModule[0]);\n \t\t\t}\n \t\t}\n \t\treturn result;\n \t}\n\n \t// The module cache\n \tvar installedModules = {};\n\n \t// object to store loaded and loading chunks\n \t// undefined = chunk not loaded, null = chunk preloaded/prefetched\n \t// Promise = chunk loading, 0 = chunk loaded\n \tvar installedChunks = {\n \t\t0: 0\n \t};\n\n \tvar deferredModules = [];\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \tvar jsonpArray = window[\"webpackJsonp\"] = window[\"webpackJsonp\"] || [];\n \tvar oldJsonpFunction = jsonpArray.push.bind(jsonpArray);\n \tjsonpArray.push = webpackJsonpCallback;\n \tjsonpArray = jsonpArray.slice();\n \tfor(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);\n \tvar parentJsonpFunction = oldJsonpFunction;\n\n\n \t// add entry module to deferred list\n \tdeferredModules.push([1422,1]);\n \t// run deferred modules when ready\n \treturn checkDeferredModules();\n","import Phaser from 'phaser'\r\nimport logo from 'images/logo.png'\r\nimport mushroom from 'images/mushroom2.png'\r\nimport cardBackground from 'images/cardBackground.png'\r\nimport pileBg from 'images/pileBg.png'\r\nimport Goblin from 'images/Goblin.png'\r\nimport Goobler from 'images/Goobler.png'\r\n\r\nexport default class extends Phaser.Scene {\r\n\tconstructor() {\r\n\t\tsuper({ key: 'Boot' })\r\n\t}\r\n\r\n\tpreload() {\r\n\t\tconst progress = this.add.graphics()\r\n\t\tthis.load.on('progress', (value) => {\r\n\t\t\tprogress.clear()\r\n\t\t\tprogress.fillStyle(0xffffff, 0.75)\r\n\t\t\tprogress.fillRect(0, this.game.renderer.height / 2, this.game.renderer.width * value, 100)\r\n\t\t})\r\n\r\n\r\n\t\tthis.load.image(`logo`, logo)\r\n\t\tthis.load.image('mushroom', mushroom)\r\n\t\tthis.load.image(`cardBackground`, cardBackground)\r\n\t\tthis.load.image(`pileBg`, pileBg)\r\n\t\tthis.load.image(`goblin`, Goblin)\r\n\t\tthis.load.image(`goobler`, Goobler)\r\n\r\n\r\n\r\n\t}\r\n\r\n\tcreate() {\r\n\t\tthis.scene.start('Game')\r\n\t}\r\n}\r\n","import Phaser from 'phaser'\r\n\r\nexport default class extends Phaser.GameObjects.Image {\r\n  constructor (scene, x, y) {\r\n    super(scene, x, y, 'logo')\r\n    scene.add.existing(this)\r\n  }\r\n}\r\n","import Phaser from 'phaser'\r\n\r\nexport default class extends Phaser.GameObjects.Sprite {\r\n\tconstructor(scene, x, y) {\r\n\t\tsuper(scene, x, y, 'pileBg')\r\n\t\tscene.add.existing(this)\r\n\r\n\t}\r\n\r\n}\r\n","import Phaser from 'phaser'\r\n\r\nexport default class extends Phaser.GameObjects.Image {\r\n\tconstructor(scene, x, y, image, rarity) {\r\n\t\tsuper(scene, x, y, 'cardBackground')\r\n\t\tthis.rarity = rarity\r\n\r\n\t\tthis.create()\r\n\r\n\t}\r\n\r\n\tresetTint() {\r\n\t\tif (this.rarity === 'common') {\r\n\t\t\tthis.tint = 0x555555\r\n\t\t} else if (this.rarity === 'rare') {\r\n\t\t\tthis.tint = 0xAAAAAA\r\n\t\t}\r\n\t}\r\n\r\n\tcreate() {\r\n\t\tthis.scene.add.existing(this)\r\n\t\tthis.resetTint()\r\n\t}\r\n\r\n}\r\n\r\n","const attacks = {\r\n\tstrike: {\r\n\t\tnameRef: \"strike\",\r\n\t\tname: \"Strike\",\r\n\t\tselector: \"single\",\r\n\t\tactions: {\r\n\t\t\tdoDamage: {damage:6},\r\n\t\t},\r\n\t\ttype: \"attack\",\r\n\t\tbaseCost: 1,\r\n\t\tcurrentCost: 1,\r\n\t\tprops:{\r\n\t\t\tplayable:true\r\n\t\t},\r\n\t\tdescription: function () {\r\n\t\t\treturn `Deal ${this.actions.doDamage.damage} damage.`\r\n\t\t},\r\n\t\trarity: 'common'\r\n\t},\r\n\tdoubleStrike: {\r\n\t\tnameRef: \"doubleStrike\",\r\n\t\tname: \"Double Strike\",\r\n\t\tselector: \"single\",\r\n\t\tactions: {\r\n\t\t\tdoDamage: {damage:6, timesHit:2}\r\n\t\t},\r\n\t\ttype: \"attack\",\r\n\t\tbaseCost: 1,\r\n\t\tcurrentCost: 1,\r\n\t\tprops:{\r\n\t\t\tplayable:true\r\n\t\t},\r\n\t\tdescription: function () {\r\n\t\t\treturn `Deal ${this.actions.doDamage.damage} damage \\n${this.actions.doDamage.timesHit} times to all enemies.`\r\n\t\t},\r\n\t\trarity: 'common'\r\n\t},\r\n\twildElbow: {\r\n\t\tnameRef: \"wildElbow\",\r\n\t\tname: \"Wild Elbow\",\r\n\t\tselector: \"random\",\r\n\t\tactions: {\r\n\t\t\tdoDamage: 8\r\n\t\t},\r\n\t\ttype: \"attack\",\r\n\t\tbaseCost: \"random\",\r\n\t\tcurrentCost: null,\r\n\t\tprops:{\r\n\t\t\tplayable:true\r\n\t\t},\r\n\t\tdescription: function () {\r\n\t\t\treturn `Deal ${this.actions.doDamage} damage \\nto a random target.`\r\n\t\t},\r\n\t\trarity: 'common'\r\n\t},\r\n}\r\n\r\n\r\n\r\n\r\n\r\nconst spells = {\r\n\tdefend: {\r\n\t\tnameRef: \"defend\",\r\n\t\tname: \"Defend\",\r\n\t\tselector: \"self\",\r\n\t\tactions: {\r\n\t\t\taddArmor: 6\r\n\t\t},\r\n\t\tbaseCost: 1,\r\n\t\tcurrentCost: 1,\r\n\t\ttype: \"spell\",\r\n\t\tprops:{\r\n\t\t\tplayable:true\r\n\t\t},\r\n\t\tdescription: function () {\r\n\t\t\treturn `Gain ${this.actions.addArmor} armor`\r\n\t\t},\r\n\t\trarity: 'common'\r\n\r\n\t},\r\n\tdodge: {\r\n\t\tnameRef: \"dodge\",\r\n\t\tname: \"Dodge\",\r\n\t\tselector: \"self\",\r\n\t\tactions: {\r\n\t\t\taddArmor: 6,\r\n\t\t\tdrawCard: 1\r\n\t\t},\r\n\t\tbaseCost: 2,\r\n\t\tcurrentCost: 2,\r\n\t\ttype: \"spell\",\r\n\t\tprops:{\r\n\t\t\tplayable:true\r\n\t\t},\r\n\t\tdescription: function ({dexterity}) {\r\n\t\t\treturn `Gain ${this.actions.addArmor + dexterity >= 0 ? this.actions.addArmor + dexterity : 0} armor, \\ndraw ${this.actions.drawCard} card`\r\n\t\t},\r\n\t\trarity: 'common'\r\n\t},\r\n\t// lift: {\r\n\t// \tname:\"Lift\",\r\n\t// \tselector:\"self\",\r\n\t// \taction: [addAttribute({attribute:\"strength\", amount:2})],\r\n\t// \tcost: 1\r\n\t// }\r\n}\r\n\r\n\r\n\r\nconst powers = {\r\n\r\n}\r\n\r\nconst cardLibrary = {\r\n\t...attacks,\r\n\t...spells,\r\n\t// ...powers\r\n}\r\n\r\nexport default cardLibrary","\r\n\r\nexport default class  {\r\n\tconstructor(scene,action,value,target) {\r\n\t\tthis.scene = scene\r\n\t\tthis.action = action\r\n\t\tthis.value = value\r\n\t\tthis.target = target\r\n\t\tthis[action](value ,target)\r\n\t}\r\n\taddArmor(amount) {\r\n\t\tthis.scene.player.armor += amount + this.scene.player.dexterity\r\n    }\r\n\r\n    drawCard(amount) {\r\n\t    this.scene.drawCardFromDrawPile(amount)\r\n    }\r\n\r\n    doDamage(values,target) {\r\n\t    const {damage,timesHit = 1 } = values\r\n\t    for(let i = 0; i <= timesHit; i++){\r\n\t\t    if(target.active) {\r\n\t\t\t\ttarget.takeDamage(damage)\r\n\t\t    }\r\n\t\t    \r\n\t    }\r\n    }\r\n}\r\n\r\n","\r\n//need to use card ref by default (camel case names) and not actual card names\r\nconst starterDeck = {\r\n\t// defend: 3,\r\n\tstrike: 8,\r\n\tdodge: 8,\r\n\t// doubleStrike: 1,\r\n\t// wildElbow: 2\r\n}\r\n\r\n\r\nexport default starterDeck","import Phaser from 'phaser'\r\n\r\nexport default class extends Phaser.Geom.Line {\r\n\tconstructor(scene, pointer, p0, p1, p2, p3) {\r\n\t\tsuper(p0, p1, p2, p3)\r\n\t\tthis.scene = scene\r\n\t\tthis.graphics = scene.add.graphics({ lineStyle: { width: 8, color: 0xff0000, alpha: 0.5 } });\r\n\t\t//this.line = scene.add.existing(this)\r\n\t}\r\n\r\n\tupdate(x, y) {\r\n\t\tthis.delete()\r\n\t\tthis.x2 = x\r\n\t\tthis.y2 = y\r\n\t\tthis.graphics = this.scene.add.graphics({ lineStyle: { width: 8, color: 0xff0000, alpha: 0.5 } });\r\n\t\tthis.line = this.scene.add.existing(this)\r\n\t\tthis.graphics.strokeLineShape(this.line);\r\n\t}\r\n\r\n\tdelete() {\r\n\t\t//if(this.line) this.line.destroy()\r\n\t\tif (this.graphics) this.graphics.destroy()\r\n\r\n\t}\r\n\r\n}\r\n\r\n\r\nfunction UpdateArc(pointer) {\r\n\r\n\r\n\tvar startPoint = new Phaser.Math.Vector2(0, 0);\r\n\tvar controlPoint1 = new Phaser.Math.Vector2(window.width / 2, window.height / 2);\r\n\tvar controlPoint2 = new Phaser.Math.Vector2(window.width, window.height / 2);\r\n\tvar endPoint = new Phaser.Math.Vector2(pointer.position.x, pointer.position.y);\r\n\tvar curve = new Phaser.Curves.CubicBezier(startPoint, controlPoint1, controlPoint2, endPoint)\r\n\r\n\r\n\t//r.y = pointer.y;\r\n\tcurve = new Phaser.Curves.CubicBezier(startPoint, controlPoint1, controlPoint2, endPoint);\r\n\r\n\tr = scene.add.scene.add.curve(400, 400, curve).setOrigin(0)\r\n\r\n\t//r.setStrokeStyle(8, 0xff0000);\r\n}\r\n\r\n","function uuid() {\r\n\treturn 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\r\n\t\tvar r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8);\r\n\t\treturn v.toString(16);\r\n\t});\r\n}\r\n\r\nexport default uuid","import Phaser from 'phaser'\r\nimport {\r\n\tcardBackground\r\n} from '../images'\r\nimport {\r\n\tcardFunctions\r\n} from '../cardLibrary'\r\n\r\nimport {\r\n\tUpdateArc\r\n} from '../utility'\r\n\r\n\r\nexport default class extends Phaser.GameObjects.Container {\r\n\tconstructor(scene, x, y, card, interactable) {\r\n\t\tsuper(scene, x, y)\r\n\t\tthis.scene = scene\r\n\t\tthis.card = card\r\n\t\tscene.add.existing(this)\r\n\t\tthis.player = scene.player\r\n\t\tthis.getBackground()\r\n\t\tthis.getCardTitle()\r\n\t\tthis.getDescription()\r\n\t\tthis.getManaCost()\r\n\r\n\r\n\t\tthis.setSize(this.background.width, this.background.height)\r\n\t\t\t.setInteractive({\r\n\t\t\t\tdraggable: true\r\n\t\t\t});\r\n\r\n\t\tif (interactable) {\r\n\t\t\tthis.getManaOutline()\r\n\t\t\tthis.setEventListeners()\r\n\t\t}\r\n\r\n\r\n\r\n\r\n\t}\r\n\r\n\tsetEventListeners() {\r\n\r\n\r\n\t\tthis.on('pointerover', function (...args) {\r\n\t\t\tthis.y = this.scene.dimensions.height - 110\r\n\t\t\tthis.scene.children.bringToTop(this);\r\n\t\t\tthis.angle = 0\r\n\t\t});\r\n\r\n\t\tthis.on('pointerout', function (pointer, gameObject) {\r\n\t\t\tthis.y = this.handY\r\n\t\t\tthis.angle = this.handAngle\r\n\t\t});\r\n\r\n\t\t// this.on('pointerdown', function (pointer, gameObject) {\r\n\t\t\t\r\n\t\t// });\r\n\r\n\r\n\t\tthis.on('dragstart', function (pointer, gameObject) {\r\n\t\t\tthis.setScale(1.2)\r\n\t\t\tthis.scene.children.bringToTop(gameObject);\r\n\t\t});\r\n\r\n\t\tlet lineActive = false\r\n\t\tlet line\r\n\r\n\t\tthis.on('drag', (pointer, dragX, dragY, ) => {\r\n\r\n\t\t\tthis.angle = 0\r\n\t\t\tthis.x = pointer.x;\r\n\t\t\tthis.y = pointer.y;\r\n\t\t\t\r\n\r\n\t\t\t// if(pointer.position.y <= 500) { \r\n\t\t\t// \t// gameObject.y = 665\r\n\t\t\t// \t// gameObject.x = gameObject.handX\r\n\r\n\t\t\t// }\r\n\t\t\t//this.manageHand()\r\n\r\n\r\n\t\t\t// var boundsA = gameObject.getBounds();\r\n\t\t\t// var boundsB = enemy.getBounds();\r\n\t\t\t// console.log(boundsA,boundsB)\r\n\t\t\t// console.log(Phaser.Geom.Rectangle.Intersection(boundsA, boundsB))\r\n\r\n\t\t\t// var startPoint = new Phaser.Math.Vector2(0, 0);\r\n\t\t\t// var controlPoint1 = new Phaser.Math.Vector2(window.width / 2, window.height / 2 );\r\n\t\t\t// var controlPoint2 = new Phaser.Math.Vector2(window.width , this.game.config.height / 2 );\r\n\t\t\t// var endPoint = new Phaser.Math.Vector2(pointer.position.x  , pointer.position.y );\r\n\t\t\t// var curve = new Phaser.Curves.CubicBezier(startPoint, controlPoint1, controlPoint2, endPoint)\r\n\t\t\t//after dragging it so far, lock the card into a positionv\r\n\t\t\t//var r = this.add.curve(0, 0, curve).setOrigin(0)\r\n\r\n\t\t\t// if(this.y <= 700) {\r\n\t\t\t// \tthis.background.tint = 0x44ff44\r\n\t\t\t// } else {\r\n\t\t\t// \tthis.background.resetTint()\r\n\t\t\t// }\r\n\r\n\t\t\tif (this.card.selector === \"single\") { //if the card's selector is single target, then create a UI line for the player\r\n\r\n\t\t\t\tif (this.y <= 700 && lineActive === false) {\r\n\t\t\t\t\tlineActive = true\r\n\t\t\t\t\tline = new UpdateArc(this.scene, pointer, (this.scene.dimensions.width / 2), (this.scene.dimensions.height / 1.2), pointer.x, pointer.y)\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (lineActive) {\r\n\t\t\t\t\tthis.x = (this.scene.dimensions.width / 2)\r\n\t\t\t\t\tthis.y = (this.scene.dimensions.height - this.height)\r\n\t\t\t\t\tline.update(pointer.x, pointer.y)\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (pointer.y >= 700 && lineActive === true) {\r\n\t\t\t\t\tif (line) line.delete()\r\n\t\t\t\t\tlineActive = false\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\r\n\r\n\r\n\t\t});\r\n\r\n\r\n\t\tthis.on('dragend', (pointer, gameObject) => {\r\n\t\t\tthis.background.resetTint()\r\n\t\t\tif (pointer.y <= 500) { //try to play the card, if played, this container is destroyed and is gone\r\n\t\t\t\t\r\n\t\t\t\tif(lineActive) { //if the card requires a target\r\n\r\n\t\t\t\t\tif(this.scene.cardTarget) { //if currently dragging on a viable card target, play the card\r\n\t\t\t\t\t\tthis.playCard(this.scene.cardTarget)\r\n\t\t\t\t\t} else { //else place the card back into your hand\r\n\t\t\t\t\t\tthis.setScale(1)\r\n\t\t\t\t\t\tthis.scene.manageHand()\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t} else { // else just try to play the card\r\n\t\t\t\t\tthis.playCard()\r\n\t\t\t\t}\r\n\t\t\t} else { // if the card is droped before hitting the y-axis threshold, return the card back into the hand\r\n\t\t\t\tthis.setScale(1)\r\n\t\t\t\tthis.scene.manageHand()\r\n\t\t\t}\r\n\r\n\t\t\tif (line) {\r\n\t\t\t\tline.delete()\r\n\t\t\t} // if the card created a ui line, delete it and \r\n\t\t\tlineActive = false\r\n\t\t});\r\n\r\n\r\n\t}\r\n\r\n\r\n\tgetBackground() {\r\n\t\tif (this.background) this.background.destroy()\r\n\t\tlet background = new cardBackground(this.scene, 0, 0, 'cardBackground', this.card.rarity)\r\n\t\tthis.background = background\r\n\t\tif (this) this.add(this.background)\r\n\t}\r\n\r\n\tgetCardTitle(arg) {\r\n\t\tif (this.cardTitle) this.cardTitle.destroy()\r\n\r\n\t\tlet style = {\r\n\t\t\tfont: `${12}pt Arial`,\r\n\t\t\tfill: 'white',\r\n\t\t\talign: 'center',\r\n\t\t\twordWrap: true,\r\n\t\t\twordWrapWidth: 20,\r\n\t\t};\r\n\r\n\t\tlet cardTitle = this.scene.add.text(0, -(this.background.height / 2.5), arg || this.card.name, style).setOrigin(.5)\r\n\t\tthis.cardTitle = cardTitle\r\n\t\tif (this) this.add(this.cardTitle)\r\n\t}\r\n\r\n\tgetDescription() {\r\n\t\tif (this.cardDescription) this.cardDescription.destroy()\r\n\t\tlet style = {\r\n\t\t\tfont: `${12}pt Arial`,\r\n\t\t\tfill: 'white',\r\n\t\t\talign: 'center',\r\n\t\t\twordWrap: true,\r\n\t\t\twordWrapWidth: 20,\r\n\t\t};\r\n\t\tlet cardDescription = this.scene.add.text(0, this.background.height / 5, this.card.description(this.player), style).setOrigin(.5)\r\n\t\tcardDescription.lineHeight = 50\r\n\r\n\t\tif (cardDescription.width > this.background.width) {\r\n\t\t\tstyle = {\r\n\t\t\t\tfont: '10pt Arial',\r\n\t\t\t\tfill: 'white',\r\n\t\t\t\talign: 'center',\r\n\t\t\t\twordWrap: true,\r\n\t\t\t\twordWrapWidth: 20,\r\n\t\t\t};\r\n\t\t\tcardDescription = this.scene.add.text(0, this.background.height / 5, this.card.description(this.player), style).setOrigin(.5)\r\n\t\t}\r\n\t\tthis.cardDescription = cardDescription\r\n\t\tif (this) this.add(this.cardDescription)\r\n\t}\r\n\r\n\tgetManaCost() {\r\n\t\tif (this.manaCost) this.manaCost.destroy()\r\n\t\tlet manaCircle = new Phaser.Geom.Circle(-this.background.width / 2, -this.background.height / 2, 20)\r\n\t\tlet manaGraphics = new Phaser.GameObjects.Graphics(this.scene)\r\n\t\tmanaGraphics.fillStyle(0x0000FF);\r\n\t\tmanaGraphics.fillCircleShape(manaCircle);\r\n\t\tlet style = {\r\n\t\t\tfont: `${24}pt Arial`,\r\n\t\t\tfill: 'white',\r\n\t\t\talign: 'center',\r\n\t\t\twordWrap: true,\r\n\t\t\twordWrapWidth: 20,\r\n\t\t};\r\n\r\n\t\tlet manaCost = this.scene.add.text(-(this.background.width / 2), -(this.background.height / 2), this.card.currentCost, style).setOrigin(.5)\r\n\r\n\t\tthis.manaCost = manaCost\r\n\r\n\t\tif (this.manaCost) this.add(manaGraphics), this.add(this.manaCost)\r\n\r\n\t}\r\n\r\n\tgetManaOutline() {\r\n\r\n\r\n\t\t//let rect = new Phaser.Geom.Rectangle(((-this.background.width - 10) / 2), ((-this.background.height - 10) / 2), this.background.width + 10, this.background.height + 10)\r\n\t\tlet graphics = new Phaser.GameObjects.Graphics(this.scene)\r\n\t\tgraphics.fillStyle(0x00FF00, 0.6);\r\n\t\tgraphics.fillRoundedRect(((-this.background.width - 10) / 2), ((-this.background.height - 10) / 2), this.background.width + 10, this.background.height + 10, 5);\r\n\r\n\r\n\r\n\t\tthis.manaOutline = graphics\r\n\t\tthis.add(this.manaOutline)\r\n\t\tthis.sendToBack(this.manaOutline)\r\n\r\n\t\t//animate the outline\r\n\t\tthis.scene.tweens.add({\r\n\t\t\tduration: 1000,\r\n\t\t\ttargets: this.manaOutline,\r\n\t\t\talpha: 0.8,\r\n\t\t\tscaleX: 0.99,\r\n\t\t\tscaleY: 0.99,\r\n\t\t\tyoyo: true,\r\n\t\t\trepeat: -1,\r\n\t\t\tease: 'Sine.easeInOut'\r\n\t\t});\r\n\t}\r\n\r\n\r\n\r\n\tcantPlay() {\r\n\t\tif (this.cantPlayOutline) this.cantPlayOutline.destroy()\r\n\r\n\t\t//game message that you don't have enough mana\r\n\t\tlet style = {\r\n\t\t\tfont: `${20}pt Arial`,\r\n\t\t\tfill: 'white',\r\n\t\t\talign: 'center',\r\n\t\t\twordWrap: true,\r\n\t\t\twordWrapWidth: 20,\r\n\t\t};\r\n\r\n\t\tlet outOfManaMessage = this.scene.add.text(this.scene.dimensions.width / 2, this.scene.dimensions.height / 2, \"You are out of mana!\", style).setOrigin(.5)\r\n\r\n\r\n\t\t//red card outline when trying to play a card\r\n\t\t//let rect = new Phaser.Geom.Rectangle(((-this.background.width - 10) / 2), ((-this.background.height - 10) / 2), this.background.width + 10, this.background.height + 10)\r\n\t\tlet graphics = new Phaser.GameObjects.Graphics(this.scene)\r\n\t\tgraphics.fillStyle(0xFF0000, 0.6);\r\n\t\tgraphics.fillRoundedRect(((-this.background.width - 10) / 2), ((-this.background.height - 10) / 2), this.background.width + 10, this.background.height + 10, 5)\r\n\t\t//graphics.fillRoundedRect(rect);\r\n\r\n\t\tthis.cantPlayOutline = graphics\r\n\t\tthis.add(this.cantPlayOutline)\r\n\t\tthis.sendToBack(this.cantPlayOutline)\r\n\r\n\r\n\t\t// after 750ms , destroy the outline and message\r\n\t\tthis.scene.time.addEvent({\r\n\t\t\tdelay: 750,\r\n\t\t\tcallback: () => {\r\n\t\t\t\toutOfManaMessage.destroy()\r\n\t\t\t\tthis.cantPlayOutline.destroy()\r\n\t\t\t},\r\n\t\t\tcallbackScope: this,\r\n\t\t});\r\n\t}\r\n\r\n\tplayCard(target) {\r\n\r\n\t\tif (this.player.currentMana >= this.card.currentCost && this.card.currentCost !== null) { //card is playable if if costs less or equal to  current player mana and the cost is not set to null\r\n\t\t\tswitch (this.card.selector) {\r\n\t\t\t\tcase \"self\":\r\n\t\t\t\t\t//for each card action, do the action\r\n\t\t\t\t\tObject.keys(this.card.actions).forEach((action) => {\r\n\t\t\t\t\t\tlet value = this.card.actions[action]\r\n\t\t\t\t\t\tnew cardFunctions(this.scene, action, value)\r\n\t\t\t\t\t})\r\n\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase \"single\":\r\n\t\t\t\t\t//for each card action, do the action\r\n\t\t\t\t\tObject.keys(this.card.actions).forEach((action,i) => {\r\n\r\n\t\t\t\t\t\tif(this.scene.cardTarget) { //if card target still exists\r\n\t\t\t\t\t\t\tlet value = this.card.actions[action]\r\n\t\t\t\t\t\t\tnew cardFunctions(this.scene, action, value, target)\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t})\r\n\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\r\n\t\t\tthis.player.currentMana -= this.card.currentCost\r\n\r\n\t\t\tthis.scene.tweens.add({\r\n\t\t\t\tduration: 150,\r\n\t\t\t\ttargets: this,\r\n\t\t\t\talpha: 0,\r\n\t\t\t\tscale:0.1,\r\n\t\t\t\tx: this.scene.discardPileDisplay.x,\r\n\t\t\t\ty:this.scene.discardPileDisplay.y,\r\n\t\t\t\trepeat: 0,\r\n\t\t\t\tease: 'Sine.easeInOut',\r\n\t\t\t\tonComplete: () => {\r\n\t\t\t\t\tthis.scene.discard(this.card)\r\n\t\t\t\t\tthis.scene.handArray = this.scene.handArray.filter(card => card.card.id !== this.card.id)\r\n\t\t\t\t\tthis.scene.cardTarget = false\r\n\t\t\t\t\tthis.scene.manageHand()\r\n\t\t\t\t\tthis.destroy()\r\n\t\t\t\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\t\t//update the scene's properties before destroying this card\r\n\t\t\t\r\n\t\t\t\r\n\r\n\t\t\t\r\n\t\t\t\r\n\r\n\t\t} else { //not enough mana to play this card\r\n\t\t\tthis.scene.manageHand()\r\n\t\t\tthis.setScale(1)\r\n\t\t\tthis.cantPlay()\r\n\t\t}\r\n\r\n\r\n\r\n\t}\r\n\r\n\r\n\r\n\r\n\tupdate() {\r\n\t\t//only update if the current scene is \"Game\" and\r\n\t\t//the player's current mana is less than the card's current cost or\r\n\t\t// if the card cost is equal to null (null in the case of unplayable cards)\r\n\t\tif (this.scene.scene.key === \"Game\" && this.player.currentMana < this.card.currentCost || this.card.currentCost === null) {\r\n\t\t\tif (this.manaOutline) {\r\n\t\t\t\tthis.manaOutline.destroy()\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t}\r\n\r\n\r\n\r\n}\r\n","import Phaser from 'phaser'\r\nimport {\r\n\tpileBg\r\n} from '../images'\r\n\r\n\r\nexport default class extends Phaser.GameObjects.Container {\r\n\tconstructor(scene, x, y) {\r\n\t\tsuper(scene, x, y)\r\n\t\tthis.scene = scene\r\n\t\tthis.scene.add.existing(this)\r\n\r\n\t\tthis.getBackground()\r\n\t\tthis.updateDrawPileCounter()\r\n\r\n\t\tthis.setSize(this.background.width, this.background.height).setInteractive()\r\n\t\tthis.setEventListeners()\r\n\r\n\t}\r\n\tsetEventListeners() {\r\n\t\tthis.on(\"pointerover\", (pointer) => {\r\n\t\t\tthis.background.tint = 0x00ff00\r\n\t\t})\r\n\t\tthis.on(\"pointerout\", (pointer) => {\r\n\t\t\tthis.background.tint = 0xffffff\r\n\t\t})\r\n\r\n\t\tthis.on(\"pointerdown\", (pointer) => {\r\n\t\t\t\r\n\t\t\tif (Object.keys(this.scene.drawPile).length >= 1) {\r\n\t\t\t\t//pause current game scene, is resumed when the scene below is stopped\r\n\t\t\t\tthis.scene.scene.pause()\r\n\t\t\t\t//launch the discard pile scene menu\r\n\t\t\t\tthis.scene.scene.launch('DrawPileScene', this.scene)\r\n\t\t\t}\r\n\r\n\t\t})\r\n\t}\r\n\r\n\tupdateDrawPileCounter() {\r\n\t\tif (this.drawPileCounterCircle) {\r\n\t\t\tthis.drawPileCounterCircle.countGraphics.destroy()\r\n\t\t\tthis.drawPileCounterCircle.countNumber.destroy()\r\n\t\t}\r\n\t\tthis.drawPileCounterCircle = {}\r\n\t\tlet drawPileCount = Object.keys(this.scene.drawPile).length\r\n\r\n\t\tthis.drawPileCounterCircle.countCircle = new Phaser.Geom.Circle(0, 0, 40)\r\n\t\tthis.drawPileCounterCircle.countGraphics = new Phaser.GameObjects.Graphics(this.scene)\r\n\t\tthis.drawPileCounterCircle.countGraphics.fillStyle(0x0000FF, 0.3);\r\n\t\tthis.drawPileCounterCircle.countGraphics.fillCircleShape(this.drawPileCounterCircle.countCircle);\r\n\r\n\r\n\t\tlet style = {\r\n\t\t\tfont: `${36}pt Arial`,\r\n\t\t\tfill: 'white',\r\n\t\t\talign: 'center',\r\n\t\t\twordWrap: true,\r\n\t\t\twordWrapWidth: 20,\r\n\t\t};\r\n\t\tthis.drawPileCounterCircle.countNumber = this.scene.add.text(0, 0, drawPileCount, style).setOrigin(.5)\r\n\r\n\t\tthis.add(this.drawPileCounterCircle.countGraphics)\r\n\t\tthis.add(this.drawPileCounterCircle.countNumber)\r\n\t}\r\n\r\n\tgetBackground() {\r\n\t\tif (this.background) this.background.destroy()\r\n\t\tthis.background = new pileBg(this.scene)\r\n\t\tthis.add(this.background)\r\n\t}\r\n\r\n\r\n\r\n}\r\n","import Phaser from 'phaser'\r\nimport {\r\n\tpileBg\r\n} from '../images'\r\n\r\n\r\nexport default class extends Phaser.GameObjects.Container {\r\n\tconstructor(scene, x, y) {\r\n\t\tsuper(scene, x, y)\r\n\t\tthis.scene = scene\r\n\t\tthis.scene.add.existing(this)\r\n\r\n\t\tthis.getBackground()\r\n\t\tthis.updateDiscardPileCounter()\r\n\r\n\t\tthis.setSize(this.background.width, this.background.height).setInteractive()\r\n\t\tthis.setEventListeners()\r\n\r\n\t}\r\n\r\n\tsetEventListeners() {\r\n\t\tthis.on(\"pointerover\", (pointer) => {\r\n\t\t\tthis.background.tint = 0xff3333\r\n\t\t})\r\n\t\tthis.on(\"pointerout\", (pointer) => {\r\n\t\t\tthis.background.tint = 0xff7777\r\n\t\t})\r\n\r\n\t\tthis.on(\"pointerdown\", (pointer) => {\r\n\t\t\t\r\n\t\t\tif (Object.keys(this.scene.discardPile).length >= 1) {\r\n\t\t\t\t//pause current game scene, is resumed when the scene below is stopped\r\n\t\t\t\tthis.scene.scene.pause()\r\n\t\t\t\t//launch the discard pile scene menu\r\n\t\t\t\tthis.scene.scene.launch('DiscardPileScene', this.scene)\r\n\t\t\t}\r\n\r\n\t\t})\r\n\t}\r\n\r\n\tupdateDiscardPileCounter() {\r\n\t\tif (this.discardPileCounterCircle) {\r\n\t\t\tthis.discardPileCounterCircle.countGraphics.destroy()\r\n\t\t\tthis.discardPileCounterCircle.countNumber.destroy()\r\n\t\t}\r\n\t\tthis.discardPileCounterCircle = {}\r\n\t\tlet discardPileLength= Object.keys(this.scene.discardPile).length\r\n\r\n\t\tthis.discardPileCounterCircle.countCircle = new Phaser.Geom.Circle(0, 0, 40)\r\n\t\tthis.discardPileCounterCircle.countGraphics = new Phaser.GameObjects.Graphics(this.scene)\r\n\t\tthis.discardPileCounterCircle.countGraphics.fillStyle(0x0000FF, 0.3);\r\n\t\tthis.discardPileCounterCircle.countGraphics.fillCircleShape(this.discardPileCounterCircle.countCircle);\r\n\r\n\r\n\t\tlet style = {\r\n\t\t\tfont: `${36}pt Arial`,\r\n\t\t\tfill: 'white',\r\n\t\t\talign: 'center',\r\n\t\t\twordWrap: true,\r\n\t\t\twordWrapWidth: 20,\r\n\t\t};\r\n\t\tthis.discardPileCounterCircle.countNumber = this.scene.add.text(0, 0, discardPileLength, style).setOrigin(.5)\r\n\t\tthis.add(this.discardPileCounterCircle.countGraphics)\r\n\t\tthis.add(this.discardPileCounterCircle.countNumber)\r\n\t}\r\n\r\n\tgetBackground() {\r\n\t\tif (this.background) this.background.destroy()\r\n\t\tthis.background = new pileBg(this.scene)\r\n\t\tthis.background.tint = 0xff7777\r\n\t\tthis.add(this.background)\r\n\t}\r\n\r\n\r\n\r\n\r\n}\r\n\r\n\r\n","import Phaser from 'phaser'\r\n\r\nexport default class extends Phaser.GameObjects.Sprite {\r\n  constructor (scene, x, y,enemyType) {\r\n    super(scene, x, y,enemyType )\r\n    scene.add.existing(this).setOrigin(.5)\r\n\t}\r\n\r\n\r\n}\r\n\r\n\r\n","\r\n\r\nconst enemiesLibrary = {\r\n\tgoblin: {\r\n\t\tnameRef: \"goblin\",\r\n\t\tname: \"Goblin\",\r\n\t\tmaxHealth: 30,\r\n\t\tcurrentHealth: 30,\r\n\t\tactions: {doDamage:7,defend:10,addAttribute:['strength',3]},\r\n\t\tonDeath:null,\t\r\n\t\treward: null,\r\n\t\tpowerLevel:1,\r\n\r\n\t},\r\n\tgoobler: {\r\n\t\tnameRef: \"goobler\",\r\n\t\tname: \"Goobler\",\r\n\t\tmaxHealth: 15,\r\n\t\tcurrentHealth: 15,\r\n\t\tactions: {doDamage:7,defend:10,addAttribute:['strength',3]},\r\n\t\tonDeath:null,\r\n\t\treward: null,\r\n\t\tpowerLevel:1,\r\n\t}\r\n}\r\n\r\nexport default enemiesLibrary","import Phaser from 'phaser'\r\n\r\nexport default class extends Phaser.GameObjects.GameObject {\r\n\tconstructor(scene, x, y, container, character) {\r\n\t\tsuper(scene, x, y)\r\n\t\tthis.scene = scene\r\n\t\tthis.parentContainer = container\r\n\t\tthis.character = character\r\n\t\tthis.create()\r\n\t}\r\n\r\n\r\n\tcreate() {\r\n\t\t//create health bar background, no need to create a refrence to it.\r\n\t\tlet healthBarBgShape = new Phaser.Geom.Rectangle(-(this.parentContainer.enemyImage.width / 2), this.parentContainer.enemyImage.height / 2, this.parentContainer.enemyImage.width, 20)\r\n\t\tlet healthBarBgGraphics = new Phaser.GameObjects.Graphics(this.scene).fillStyle(0xFF0000, .2).fillRectShape(healthBarBgShape);\r\n\t\tthis.parentContainer.add(healthBarBgGraphics)\r\n\r\n\t\t//clone the background shape use it as the shape of the healthbar\r\n\t\tthis.healthBarShape = Phaser.Geom.Rectangle.Clone(healthBarBgShape)\r\n\t\t// this.healthBarGraphics = new Phaser.GameObjects.Graphics(this.scene).fillStyle(0xFF0000, 1).fillRectShape(this.healthBarShape)\r\n\t\t// this.parentContainer.add(this.healthBarGraphics)\r\n\t\t\r\n\t\t\r\n\t\tlet style = {\r\n\t\t\tfont: `${12}pt Arial`,\r\n\t\t\tfill: 'white',\r\n\t\t\talign: 'center',\r\n\t\t\twordWrap: true,\r\n\t\t\twordWrapWidth: 20,\r\n\t\t};\r\n\r\n\t\tthis.healthText = this.scene.add.text(this.parentContainer.width / 2, this.parentContainer.enemyImage.height / 2 + 10, ``, style).setOrigin(.5)\r\n\t\t\r\n\t\tthis.update()\r\n\t\t\r\n\t\t\r\n\t}\r\n\r\n\tupdate() {\r\n\t\tif (this.healthBarGraphics) {\r\n\t\t\tthis.healthBarGraphics.destroy()\r\n\t\t}\r\n\t\tthis.healthBarShape.width = (this.character.currentHealth / this.character.maxHealth) * this.parentContainer.enemyImage.width\r\n\t\tthis.healthBarGraphics = new Phaser.GameObjects.Graphics(this.scene).fillStyle(0xFF0000, 1).fillRectShape(this.healthBarShape)\r\n\t\t//this.healthBarShape.setSize((this.character.currentHealth / this.character.maxHealth) * this.parentContainer.enemyImage.width, 20)\r\n\t\t\r\n\t\t//this.healthBarShape.width = Math.floor((this.character.currentHealth / this.character.maxHealth) * this.parentContainer.enemyImage.width)\r\n\t\tthis.parentContainer.add(this.healthBarGraphics)\r\n\r\n\t\tthis.healthText.setText(`${this.character.currentHealth}/${this.character.maxHealth}`)\r\n\t\tthis.parentContainer.add(this.healthText)\r\n\t\tthis.parentContainer.bringToTop(this.healthText)\r\n\t\tif (this.character.armor >= 1) {\r\n\t\t\tthis.healthBarGraphics.fillStyle(0x333333, 1)\r\n\t\t}\r\n\t}\r\n\r\n\r\n\r\n}\r\n","import Phaser from 'phaser'\r\nimport {\r\n\tEnemyAvatar\r\n} from '../../sprites'\r\nimport enemiesLibrary from './enemiesLibrary'\r\nimport HealthBar from '../dependencies/HealthBar'\r\n\r\nexport default class extends Phaser.GameObjects.Container {\r\n\tconstructor(scene, x, y, enemyType) {\r\n\t\tsuper(scene, x, y)\r\n\t\tthis.scene = scene\r\n\t\tthis.enemy = {\r\n\t\t\t...enemiesLibrary[enemyType]\r\n\t\t}\r\n\t\tthis.create()\r\n\t\tscene.add.existing(this, x, y)\r\n\t\t\t.setSize(this.enemyImage.width + 100, this.enemyImage.height + 100)\r\n\t\t\t.setInteractive();\r\n\r\n\t\tthis.setEventListeners()\r\n\t}\r\n\r\n\tsetEventListeners() {\r\n\t\t\r\n\t\t// this.on('pointerover', function (...args) {\r\n\t\t// \tconsole.log(this.enemy.nameRef)\r\n\t\t// });\r\n\t\t\r\n\t\tthis.on('pointerover', () => {\r\n\t\t\tthis.enemyImage.tint = 0xff6666\r\n\t\t\tif(!this.scene.cardTarget) {\r\n\t\t\t\tthis.scene.cardTarget = this\r\n\t\t\t}\r\n\t\t});\r\n\t\tthis.on('pointerout', () => {\r\n\t\t\tthis.enemyImage.tint = 0xffffff\r\n\t\t\tthis.scene.cardTarget = false\r\n\t\t});\r\n\r\n\t\t// this.on('pointerup', (...args) => {\r\n\t\t// \tif(this.scene.cardTarget === null) {\r\n\t\t// \t\tthis.scene.cardTarget = this\r\n\t\t// \t}\r\n\t\t// });\r\n\t}\r\n\r\n\tcreate() {\r\n\t\t//create enemy image\r\n\t\tthis.enemyImage = new EnemyAvatar(this.scene, 0, 0, this.enemy.nameRef)\r\n\t\tthis.add(this.enemyImage)\r\n\r\n\t\tthis.healthBar = new HealthBar(this.scene, 20, 20, this, this.enemy)\r\n\t\tthis.healthBar.update()\r\n\r\n\t}\r\n\r\n\tupdateEnemyImage() {\r\n\r\n\t}\r\n\r\n\r\n\ttakeDamage(amount) {\r\n\r\n\t\tthis.scene.tweens.add({\r\n\t\t\ttargets: this.enemyImage,\r\n\t\t\tx: 20,\r\n\t\t\tduration: 150,\r\n\t\t\tease: 'Power2',\r\n\t\t\tyoyo: true,\r\n\t\t\tloop: false\r\n\t\t})\r\n\r\n\t\tif (this.enemy.currentHealth <= 0) {\r\n\t\t\tthis.scene.time.addEvent({\r\n\t\t\t\tdelay: 500,             \r\n\t\t\t\tcallback: () => {\r\n\t\t\t\t\tthis.death()\r\n\t\t\t\t},\r\n\t\t\t\tloop: false,\r\n\t\t\t });\r\n\t\t\t//this.death()\r\n\t\t} else {\r\n\t\t\tthis.enemy.currentHealth -= amount;\r\n\t\t\tthis.healthBar.update()\r\n\t\t}\r\n\t}\r\n\r\n\tdeath() {\r\n\t\tthis.scene.cardTarget = false\r\n\t\tthis.destroy()\r\n\t\treturn;\r\n\t}\r\n\r\n\theal(amount) {\r\n\t\tif (this.enemy.currentHealth < this.enemy.maxHealth) { // if current health is less than max health\r\n\r\n\t\t\tif ((this.enemy.currentHealth + amount) >= this.enemy.maxHealth) { // if current health plus amount healed is greater than max health \r\n\t\t\t\tthis.enemy.currentHealth = this.enemy.maxHealth //set current health to max health\r\n\t\t\t} else {\r\n\t\t\t\tthis.enemy.currentHealth += amount //else add amount healed to current health\r\n\t\t\t}\r\n\r\n\t\t}\r\n\t\tthis.healthBar.update()\r\n\t}\r\n\r\n\tdoRandomAction() {\r\n\r\n\t}\r\n\r\n\r\n\r\n}\r\n","import Phaser from 'phaser'\r\nimport { Logo } from '../images'\r\nimport { Mushroom, CardCreator, DrawPileCreator, DiscardPileCreator } from '../sprites'\r\n//import { Card } from '../images'\r\nimport { cardLibrary, starterDeck } from '../cardLibrary'\r\nimport { EnemyCreator } from '../charathers'\r\nimport { uuid } from '../utility'\r\n\r\n\r\n\r\nexport default class extends Phaser.Scene {\r\n\tconstructor() {\r\n\t\tsuper({ key: 'Game' })\r\n\t\tthis.player = {\r\n\t\t\thp: 80,\r\n\t\t\tarmor: 0,\r\n\t\t\tstrength: 0,\r\n\t\t\tdexterity: 6,\r\n\t\t\tbuffs: [],\r\n\t\t\tcurrentMana: 333,\r\n\t\t\tmaxMana: 3,\r\n\t\t\trelics: [],\r\n\t\t\tdrawAmount: 10,\r\n\t\t\tmaxHandSize:10,\r\n\t\t\tisTurn: true\r\n\t\t}\r\n\r\n\t\tthis.playerDeck = {} //player's base deck\r\n\t\tthis.drawPile = {}  //player's draw pile\r\n\t\tthis.discardPile = {} //player's discard pile\r\n\t\tthis.hand = {} //player's hand\r\n\t\tthis.handArray = [] //player's hand used for UI handleing\r\n\t\tthis.enemies = [] //array of enemies\r\n\t\tthis.cardTarget = false\r\n\t}\r\n\r\n\r\n\r\n\t//create the player deck from the starter deck\r\n\tcreatePlayerDeck(deck = { ...starterDeck }) {\r\n\t\tfor (let [cardName, amount] of Object.entries(deck)) {\r\n\t\t\tfor (let i = 0; i < amount; i++) {\r\n\t\t\t\tlet id = uuid()\r\n\t\t\t\tthis.playerDeck[`${cardName}_${id}`] = { ...cardLibrary[cardName] }\r\n\t\t\t\tthis.playerDeck[`${cardName}_${id}`].id = id\r\n\t\t\t\tthis.playerDeck[`${cardName}_${id}`].ref = `${cardName}_${id}`\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\taddCardToPlayerDeck(card) {\r\n\t\tthis.playerDeck = { ...this.playerDeck }\r\n\t\tlet id = uuid()\r\n\t\tthis.playerDeck[`${card}_${id}`] = { ...cardLibrary[cardName] }\r\n\t\tthis.playerDeck[`${card}_${id}`].id = id\r\n\t\tthis.playerDeck[`${card}_${id}`].ref = `${card.refName}_${id}`\r\n\t}\r\n\r\n\tcreateDrawPile(deck = { ...this.playerDeck }) {\r\n\t\tthis.drawPileDisplay = new DrawPileCreator(this, 100, this.dimensions.height - 150)\r\n\t\tthis.discardPileDisplay = new DiscardPileCreator(this, this.dimensions.width - 100, this.dimensions.height - 150)\r\n\t\t\r\n\r\n\t\tlet shuffle = Object.keys(deck).sort((a,b)=> { return (Math.random() - 0.5)})\r\n\t\tshuffle.forEach(cardName => {\r\n\t\t\tthis.drawPile[cardName] = deck[cardName] \r\n\t\t})\r\n\t}\r\n\r\n\tdiscard(card) {\r\n\t\tlet cardClone = { ...card }\r\n\t\tthis.discardPile = { ...this.discardPile }\r\n\t\tthis.discardPile[card.ref] = cardClone\r\n\r\n\t\tdelete this.hand[card.ref]\r\n\r\n\t\tthis.drawPileDisplay.updateDrawPileCounter() //update the drawPile counter\r\n\t\tthis.discardPileDisplay.updateDiscardPileCounter()//update the discardPile counter\r\n\t}\r\n\r\n\r\n\r\n\tdrawCardFromDrawPile(amount = this.player.drawAmount) {\r\n\t\t\r\n\t\t//pick random card(s) to draw\r\n\t\twhile (amount > 0 && Object.keys(this.hand).length <= this.player.maxHandSize) {\r\n\t\t\tlet arrayDeckKeys = Object.keys({ ...this.drawPile })\r\n\t\t\tif (Object.entries(this.drawPile).length === 0) { //if there's nothing left in the deck array then shuffle the discard pile into the draw pile\r\n\t\t\t\tthis.shuffleDiscardToDrawPile()\r\n\t\t\t\tarrayDeckKeys = Object.keys({ ...this.drawPile })\r\n\t\t\t}\r\n\r\n\t\t\t//add to hand and remove from discard pile\r\n\t\t\tlet cardName = arrayDeckKeys[arrayDeckKeys.length - 1]\r\n\t\t\tthis.hand[cardName] = this.drawPile[cardName]\r\n\t\t\tthis.handArray.push(new CardCreator(this, this.drawPileDisplay.x, this.drawPileDisplay.y, this.drawPile[cardName], true)) //create the card and push it to the handArray for the view\r\n\t\t\tdelete this.drawPile[cardName]\r\n\t\t\tamount -= 1\r\n\t\t}\r\n\t\t\r\n\t\tthis.manageHand()\r\n\t\tthis.drawPileDisplay.updateDrawPileCounter() //update the drawPile\r\n\r\n\t}\r\n\r\n\tshuffleDiscardToDrawPile() {\r\n\r\n\t\tlet shuffleDiscardPile = Object.keys({...this.discardPile}).sort((a,b)=> { return (Math.random() - 0.5)})\r\n\t\tshuffleDiscardPile.forEach(cardName => {\r\n\t\t\tthis.drawPile[cardName] = this.discardPile[cardName] \r\n\t\t})\r\n\t\tthis.discardPile = {}\r\n\t}\r\n\r\n\tmanageHand() {\r\n\t\tlet startX = (this.dimensions.width / 2) - (Math.ceil(this.handArray.length / 2) * 100) //center canvas\r\n\t\tlet startY = (this.dimensions.height) \r\n\t\tlet rotate = this.handArray.length * -4\r\n\t\t//let startY = -15\r\n\t\tthis.handArray.forEach((card, i) => {\r\n\t\t\tstartX += 100\r\n\t\t\tstartY += i >= (this.handArray.length / 2) ? 20 : -20 \r\n\r\n\t\t\t\r\n\r\n\t\t\t\r\n\r\n\t\t\trotate += 8\r\n\t\t\tcard.handX = startX //card position while in hand, store this position for future\r\n\t\t\t//card.x = card.handX //this is the coordinate that actually changes the card's position\r\n\t\t\tcard.handY = startY\r\n\t\t\t//card.y = card.handY\r\n\t\t\tcard.handAngle = rotate //card position while in hand,store this angle for future\r\n\t\t\tcard.angle = card.handAngle  //this is the angle that actually changes the card's rotation\r\n\r\n\t\t\tthis.tweens.add({\r\n\t\t\t\tduration: 150,\r\n\t\t\t\ttargets: card,\r\n\t\t\t\tx: startX,\r\n\t\t\t\ty:startY,\r\n\t\t\t\tangle: rotate,\r\n\t\t\t\trepeat: 0,\r\n\t\t\t\tease: 'Sine.easeInOut'\r\n\t\t\t});\r\n\t\t})\r\n\r\n\t}\r\n\r\n\tstartTurn() {\r\n\t\tthis.player.isTurn = true\r\n\t\tthis.startTurnHook()\r\n\t\tthis.drawCardFromDrawPile()\r\n\t\t\r\n\t}\r\n\r\n\tdiscardHand() {\r\n\t\tObject.keys(this.hand).forEach((card,i) => {\r\n\t\t\tthis.handArray[i].destroy()\r\n\t\t\tthis.discard(this.hand[card])\r\n\t\t})\r\n\t}\r\n\r\n\tendTurn(){\r\n\t\tif(this.player.isTurn) {\r\n\t\t\tthis.player.isTurn = false\r\n\t\t}\r\n\t\t//discard hand\r\n\t\tthis.discardHand()\r\n\t\t\r\n\t\t\r\n\t\t\r\n\t\t\r\n\r\n\r\n\t}\r\n\r\n\tstartTurnHook() {\r\n\t\t//...add start turn hooks\r\n\t}\r\n\r\n\r\n\r\n\tcreate() {\r\n\t\tthis.dimensions = {\r\n\t\t\twidth: this.sys.game.canvas.width,\r\n\t\t\theight: this.sys.game.canvas.height\r\n\t\t}\r\n\r\n\t\tthis.logo = new Logo(this, 400, 150)\r\n\t\tthis.tweens.add({\r\n\t\t\ttargets: this.logo,\r\n\t\t\ty: 450,\r\n\t\t\tduration: 2000,\r\n\t\t\tease: 'Power2',\r\n\t\t\tyoyo: true,\r\n\t\t\tloop: -1\r\n\t\t})\r\n\r\n\t\tthis.createPlayerDeck()\r\n\r\n\r\n\t\t//create the combat deck each fight that copies the player deck.\r\n\t\t//defaulted to playerDeck\r\n\t\t//shuffle the pile\r\n\t\tthis.createDrawPile()\r\n\r\n\t\tthis.enemies.push(new EnemyCreator(this, 1000, 200, 'goblin')) \r\n\t\tthis.enemies.push(new EnemyCreator(this, 1150, 200, 'goblin')) \r\n\t\t// this.enemies.push(new EnemyCreator(this, 1250, 200, 'goblin')) \r\n\t\t// this.enemies.push(new EnemyCreator(this, 1350, 200, 'goblin')) \r\n\t\t// this.enemies.push(new EnemyCreator(this, 1450, 200, 'goblin')) \r\n\r\n\t\tthis.drawCardFromDrawPile()\r\n\r\n\t\tlet text = this.add.text(16, 16, 'Drag the sprite. Overlapping: false', { fill: '#ffffff' });\r\n\r\n\t\t// setTimeout(() => {\r\n\t\t// \tthis.endTurn()\r\n\t\t// }, 5000);\r\n\t}\r\n\r\n\r\n\tupdate() {\r\n\t\tif (this && this.input._draggable.length !== 0) {\r\n\t\t\tthis.input._draggable.forEach(card => {\r\n\t\t\t\tcard.update() //update the cards every cycle\r\n\t\t\t})\r\n\t\t}\r\n\r\n\r\n\t}\r\n\r\n\r\n\r\n\r\n}\r\n","import Phaser from \"phaser\";\r\nimport { CardCreator } from \"../sprites\";\r\n\r\nexport default class extends Phaser.Scene {\r\n\tconstructor() {\r\n\t\tsuper({\r\n\t\t\tkey: \"DrawPileScene\"\r\n\t\t});\r\n\t\tthis.cardList = [];\r\n\t}\r\n\r\n\tinit(gameScene) {\r\n\t\tthis.gameScene = gameScene;\r\n\t\tthis.player = gameScene.player;\r\n\t\tthis.drawPile = gameScene.drawPile;\r\n\t}\r\n\tpreload() { }\r\n\r\n\tcreate() {\r\n\r\n\t\tthis.cameras.main.backgroundColor.setTo(0, 0, 0, 220);\r\n\t\tlet xMultiplier = 0;\r\n\t\tlet yMultiplier = 0;\r\n\t\tObject.keys(this.drawPile).forEach(card => {\r\n\t\t\tlet x =\r\n\t\t\t\tthis.gameScene.dimensions.width - 300 >= xMultiplier * 200\r\n\t\t\t\t\t? (xMultiplier += 1) * 200\r\n\t\t\t\t\t: (xMultiplier = 1) * 200;\r\n\t\t\tlet y = xMultiplier !== 1 ? yMultiplier * 225 : (yMultiplier += 1) * 225;\r\n\r\n\t\t\tthis.cardList.push(\r\n\t\t\t\tnew CardCreator(this, x, y, this.drawPile[card], false)\r\n\t\t\t);\r\n\t\t});\r\n\r\n\t\tthis.input.on(\"pointerdown\", pointer => {\r\n\t\t\tthis.gameScene.scene.resume(\"Game\");\r\n\t\t\tthis.scene.stop();\r\n\t\t});\r\n\t}\r\n\r\n\tupdate(time, delta) {\r\n\t\t//console.log(time)\r\n\t}\r\n}\r\n","import Phaser from 'phaser'\r\nimport {CardCreator} from '../sprites'\r\n\r\nexport default class extends Phaser.Scene {\r\n\r\n\tconstructor () {\r\n\t    super({ key: 'DiscardPileScene' });\r\n\t    this.cardList = []\r\n\t}\r\n \r\n\tinit(gameScene) {\r\n\t\tthis.gameScene = gameScene\r\n\t\tthis.player = gameScene.player\r\n\t\tthis.discardPile = gameScene.discardPile\r\n\t}\r\n\tpreload () {\r\n\t}\r\n\t\r\n\tcreate ()  {\r\n\t\tthis.cameras.main.backgroundColor.setTo(0, 0, 0, 220);\r\n\t\tlet xMultiplier = 0\r\n\t\tlet yMultiplier = 0\r\n\t\tObject.keys(this.discardPile).forEach( (card) => {\r\n\t\t\t\r\n\t\t\tlet x = (this.gameScene.dimensions.width - 300) >= (xMultiplier * 200) ?  ( (xMultiplier += 1) * 200) :  ((xMultiplier = 1) * 200)\r\n\t\t\tlet y = xMultiplier !== 1 ?  yMultiplier * 225  : ((yMultiplier += 1) * 225)\r\n\r\n\r\n\t\t\tthis.cardList.push(new CardCreator(this,x,y,this.discardPile[card],false))\r\n\r\n\t\t\t\r\n\t\t})\r\n\r\n\t\tthis.input.on('pointerdown', (pointer) => {\r\n\t\t\t\r\n\t\t\t\tthis.gameScene.scene.resume(\"Game\")\r\n\t\t\t\tthis.scene.stop()\r\n\t\t\r\n\t\t\t\r\n\t\t\t\r\n\t\t})\r\n\t}\r\n\r\n\t\r\n\tupdate(time, delta) {\r\n\t\t//console.log(time)\r\n\t}\r\n \r\n }","import Phaser from 'phaser'\r\nimport { Boot, Game, DrawPileScene,DiscardPileScene} from 'scenes'\r\n\r\nconst config = {\r\n  type: Phaser.AUTO,\r\n  parent: 'phaser-example',\r\n  width: window.innerWidth - 25,\r\n  height: window.innerHeight -25,\r\n  scene: [\r\n    Boot,\r\n    Game,\r\n    DrawPileScene,\r\n    DiscardPileScene\r\n  ]\r\n}\r\n\r\nconst game = new Phaser.Game(config) // eslint-disable-line no-unused-vars\r\n\r\n","module.exports = __webpack_public_path__ + \"assets/images/logo.png\";","module.exports = __webpack_public_path__ + \"assets/images/mushroom2.png\";","module.exports = __webpack_public_path__ + \"assets/images/cardBackground.png\";","module.exports = __webpack_public_path__ + \"assets/images/pileBg.png\";","module.exports = __webpack_public_path__ + \"assets/images/Goblin.png\";","module.exports = __webpack_public_path__ + \"assets/images/Goobler.png\";"],"sourceRoot":""}